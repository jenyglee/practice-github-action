name: Deploy to Amazon EC2

on:
  push:
    branches:
      - develop

# 본인이 설정한 값을 여기서 채워넣습니다.
# 리전, 버킷 이름, CodeDeploy 앱 이름, CodeDeploy 배포 그룹 이름
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: jaewon-github-action-s3-bucket
  CODE_DEPLOY_APPLICATION_NAME: test-codedeploy
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: GROUP

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    # (1) 기본 체크아웃
    - name: Checkout
      uses: actions/checkout@v3

    # (2) JDK 17 세팅
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    # (3) Gradle build (Test 제외)
    - name: Build with Gradle
      uses: gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
      with:
        arguments: clean build -x test

    # (4) AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # (5) 빌드 결과물을 S3 버킷에 업로드
    - name: Upload to AWS S3
      run: |
        aws deploy push \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --ignore-hidden-files \
          --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
          --source .

    # (6) S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
    - name: Deploy to AWS EC2 from S3
      run: |
        aws deploy create-deployment \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
          --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip

# # This workflow uses actions that are not certified by GitHub.
# # They are provided by a third-party and are governed by
# # separate terms of service, privacy policy, and support
# # documentation.
# # This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# # For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

# name: Java CI with Gradle

# on:
#   push:
#     branches: [ "develop" ]
#   pull_request:
#     branches: [ "develop" ]

# env:
#   AWS_REGION: ap-northeast-2
#   S3_BUCKET_NAME: jaewon-github-action-s3-bucket
#   CODE_DEPLOY_APPLICATION_NAME: test-codedeploy
#   CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: GROUP

# permissions:
#   contents: read

# jobs:
#   build:

#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v3
#     - name: Set up JDK 17
#       uses: actions/setup-java@v3
#       with:
#         java-version: '17'
#         distribution: 'temurin'
# #     - name: Build with Gradle
# #       uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
# #       with:
# #         arguments: build
#     - uses : actions/checkout@v3
#     #1
#     # 해당 부분은 상당히 중요함 (글에서 부가설명)
#     # application.properties는 외부에 노출되면 안되므로 Actions가 빌드될때마다 해당 Repository의 Secret 설정을
#     # 이용하여서 설정 파일을 생성해줌 (github에 commit 되는게 아님!)
#     - run : touch ./src/main/resources/application.yml
#     - run : echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.yml
#     - run : cat ./src/main/resources/application.yml
    
#     # gradlew에 권한 부여
#     - name: Grant execute permission for gradlew
#       run: chmod +x gradlew
    
# #     # gradlew 빌드
#     - name: Build with Gradle
#       run: ./gradlew clean build

#     # 이름은 run 에서 설정 가능
#     # 빌드를 성공하면 해당 프로젝트를 zip로 만듬
#     - name: Make zip file
#       run: zip -r ./test.zip .
#       shell: bash

#     #2
#     # AWS 계정 설정
#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#       # 깃허브 Secret에 넣어둔 Access key
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#       # 깃허브 Secret에 넣어둔 Secret key
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       # 깃허브 Secret에 넣어둔 Region
#         aws-region: env.AWS_REGION

#     #3
#     # 만들어 놓은 S3에 해당 zip 파일 저장
#     - name: Upload to S3
#       run: aws s3 cp --region ${{ secrets.AWS_REGION }} ./test.zip s3://spartatestbucket/test.zip
    
#     #4
#     # AWS CodeDeploy에 배포
#     - name: Deploy
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       run: |
#         aws deploy create-deployment \
#         --application-name test-codedeploy \
#         --deployment-group-name GROUP \
#         --file-exists-behavior OVERWRITE \
#         --s3-location bucket=jaewon-github-action-s3-bucket,bundleType=zip,key=test.zip \
#         --region env.AWS_REGION
